const static int L = 26, M = 1000'000'007;
    struct mat{
        mat(){memset(a,0, sizeof(a));}
        mat(const mat& that){
            for(int i=0; i<26; i++){
                for(int j=0; j<26; j++){    
                    this->a[i][j]=that.a[i][j];
                }
            }
        }
        mat& operator=(const mat& that){
            if(this!=&that){
                for(int i=0; i<L; i++){
                    for(int j=0; j<26; j++){    
                        this->a[i][j]=that.a[i][j];
                    }
                }
            }
            return *this;
        }
        int a[L][L]={{0}};
    };
    mat mul(const mat& v, const mat& u){
        mat w;
        for(int i=0; i<26; i++){
            for(int j=0; j<26; j++){    
                for(int k=0; k<L; k++){
                    w.a[i][j]=(w.a[i][j] + (long long)u.a[i][k] * v.a[k][j])%M;
                }
            }
        }
        return w;
    }
    
    mat Identity(){
        mat w;
        for(int i=0; i<L; i++){
            w.a[i][i]=1;
        }
        return w;
    }
    mat binaryExpo(const mat& a, int p){
        mat w=a, ans=Identity();
        while(p){
            if(p&1)ans=mul(ans,w);
            w=mul(w,w);
            p/=2;
        }
        return ans;
    }
